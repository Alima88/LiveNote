import dataclasses
from datetime import datetime
from pydantic import BaseModel
import numpy as np

from server.config import Settings


class ClientAudioSchema(BaseModel):
    texts: list[str] = []


@dataclasses.dataclass
class ClientAudio:
    client_id: str
    # data: np.ndarray
    data: list[bytes] = dataclasses.field(default_factory=list)
    prompt: str | None = None
    offset: float = 0.0
    eos: bool = False
    no_voice_activity_chunks: int = 0

    segments_data: list[bytes] = dataclasses.field(default_factory=list)
    segments: list[str] = dataclasses.field(default_factory=list)

    text: str = ""
    transcribed_at: datetime = dataclasses.field(default_factory=datetime.now)
    summary: str = ""
    summerized_at: datetime = dataclasses.field(default_factory=datetime.now)

    @property
    def duration(self) -> float:
        return self.data.shape[0] / Settings.sample_rate

    @property
    def is_empty(self) -> bool:
        return bool(self.data)

    @property
    def last_30_seconds(self) -> np.ndarray:
        return self.data[-30 * Settings.sample_rate :]

    @property
    def last_30_seconds_duration(self) -> np.ndarray:
        return self.last_30_seconds.shape[0] / Settings.sample_rate

    def add_frames(self, frame: bytes):
        self.data.append(frame)
        return

        frame_np: np.ndarray

        if self.data is None:
            self.data = frame_np.copy()
            return

        # if self.data.shape[0] > 45 * Settings.sample_rate:
        #     self.offset += 30.0
        #     self.data = self.data[int(30 * Settings.sample_rate) :]

        self.data = np.concatenate((self.data, frame_np), axis=0)

    def add_text(self, text: str) -> None:
        """
        Add transcribed text to the client audio object.

        This method is responsible for adding transcribed text to the client audio object. The transcribed text
        is generated by the transcription service and is added to the client audio object for further processing
        or retrieval.

        Args:
            text (str): The transcribed text generated by the transcription service.

        """
        # TODO improve logic
        self.text = text
